// Linear layers are initialized with
// stdv = 1. / math.sqrt(self.weight.size(1))
// self.weight.data.uniform_(-stdv, stdv) .
// if self.bias is not None:
//   self.bias.data.uniform_(-stdv, stdv)

#include<iostream>
#include <stdio.h>      /* printf */
#include <math.h>
#include <random>
int main(){
  int dim = 128;
  float stdv = 1. / sqrt(dim);
  std::random_device rd;  // Will be used to obtain a seed for the random number engine
  std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
  std::uniform_real_distribution<> dis(-stdv, stdv);
  for (int n = 0; n < 10; ++n) {
        // Use dis to transform the random unsigned int generated by gen into a
        // double in [1, 2). Each call to dis(gen) generates a new random double
        std::cout << dis(gen) << ' ';
    }
    std::cout << '\n';

}
